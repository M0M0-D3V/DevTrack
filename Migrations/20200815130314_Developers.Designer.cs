// <auto-generated />
using System;
using DevTrack.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevTrack.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200815130314_Developers")]
    partial class Developers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DevTrack.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DevTrack.Entities.CoWorker", b =>
                {
                    b.Property<int>("WorkerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkspaceWorkId")
                        .HasColumnType("int");

                    b.HasKey("WorkerId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceWorkId");

                    b.ToTable("CoWorkers");
                });

            modelBuilder.Entity("DevTrack.Entities.Developer", b =>
                {
                    b.Property<int>("DeveloperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DeveloperId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("DevTrack.Entities.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationOrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.HasIndex("OrganizationOrgId");

                    b.HasIndex("UserId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("DevTrack.Entities.Organization", b =>
                {
                    b.Property<int>("OrgId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrgId");

                    b.HasIndex("UserId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("DevTrack.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("OrganizationOrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkspaceWorkId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId");

                    b.HasIndex("OrganizationOrgId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkspaceWorkId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("DevTrack.Entities.Task", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("TaskId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("DevTrack.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("longblob");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DevTrack.Entities.Workspace", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("OrgId")
                        .HasColumnType("int");

                    b.Property<int?>("OrganizationOrgId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("WorkId");

                    b.HasIndex("OrganizationOrgId");

                    b.HasIndex("UserId");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("DevTrack.Entities.Category", b =>
                {
                    b.HasOne("DevTrack.Entities.Project", null)
                        .WithMany("Categories")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DevTrack.Entities.CoWorker", b =>
                {
                    b.HasOne("DevTrack.Entities.User", "User")
                        .WithMany("CoWorkers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevTrack.Entities.Workspace", "Workspace")
                        .WithMany("CoWorkers")
                        .HasForeignKey("WorkspaceWorkId");
                });

            modelBuilder.Entity("DevTrack.Entities.Developer", b =>
                {
                    b.HasOne("DevTrack.Entities.Project", "Project")
                        .WithMany("Developers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevTrack.Entities.User", "User")
                        .WithMany("Developers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevTrack.Entities.Member", b =>
                {
                    b.HasOne("DevTrack.Entities.Organization", "Organization")
                        .WithMany("Members")
                        .HasForeignKey("OrganizationOrgId");

                    b.HasOne("DevTrack.Entities.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevTrack.Entities.Organization", b =>
                {
                    b.HasOne("DevTrack.Entities.User", "Organizer")
                        .WithMany("MemberOf")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevTrack.Entities.Project", b =>
                {
                    b.HasOne("DevTrack.Entities.Organization", null)
                        .WithMany("Projects")
                        .HasForeignKey("OrganizationOrgId");

                    b.HasOne("DevTrack.Entities.User", "ProjectLead")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevTrack.Entities.Workspace", null)
                        .WithMany("Projects")
                        .HasForeignKey("WorkspaceWorkId");
                });

            modelBuilder.Entity("DevTrack.Entities.Task", b =>
                {
                    b.HasOne("DevTrack.Entities.Project", null)
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("DevTrack.Entities.Workspace", b =>
                {
                    b.HasOne("DevTrack.Entities.Organization", "Organization")
                        .WithMany("Workspaces")
                        .HasForeignKey("OrganizationOrgId");

                    b.HasOne("DevTrack.Entities.User", "Creator")
                        .WithMany("Workspace")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
